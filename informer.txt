continuando validando 

docker run --name  devburger-postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres

npx sequelize-cli db:migrate

instalando yup
yarn add yup

instalando bcrypt
yarn add bcrypt

migrando tabela de produtos
yarn sequelize migration:create --name create-products-table

apos configurar migrations create-products-table
yarn sequelize db:migrate


para upload de imagens
yarn add multer

instalando jwt
yarn add jsonwebtoken


criando migra√ß√£o de categorias
yarn sequelize migration:create --name create-categories-table

apos configura√ß√£o do migration categories
yarn sequelize db:migrate


yarn sequelize migration:create --name add-category-id-column

docker ps 

docker run --name  devburger-mongo -p 27017:27017 -d -t mongo

instalando mongoose
yarn add mongoose

criando coluna de ofertas
yarn sequelize migration:create --name add-offer-column

-------------------------------------------------------------------
//criando a coluna de ofertas offer em products

'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    await queryInterface.addColumn('products', 'offer', {
      type: Sequelize.BOOLEAN,
      defaultValue: false,
      allowNull: false,
    });
  },

  async down (queryInterface) {
     await queryInterface.removeColumn('products', 'offer');
  }
};
-------------------------------------------------------------------
executa com:

yarn sequelize db:migrate

//criando a coluna do caminho da imagem de categorias
yarn sequelize migration:create --name add-path-column

'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    await queryInterface.addColumn('categories', 'path' {
      type: Sequelize.STRING,
    });
  },

  async down (queryInterface) {
    await queryInterface.addColumn('categories', 'path');
  }
};

// agora vamos fazer a a√ß√£o acima com
yarn sequelize db:migrate


instalando cors 
yarn add cors




endere√ßo da seed
https://github.com/rodolfomori-devclub/seed-devburger-api.git




============================================================================================================

Para abrir a permiss√£o na porta 3001 no Windows via Prompt de Comando (CMD), voc√™ pode seguir estes passos:

Abra o CMD como Administrador:

Pressione Win + S, digite cmd, e clique com o bot√£o direito em Prompt de Comando.

Escolha Executar como administrador.

Adicionar uma regra no firewall para permitir a porta:

No CMD, digite o seguinte comando e pressione Enter:


netsh advfirewall firewall add rule name="Abrir Porta 3001" dir=in action=allow protocol=TCP localport=3001
netsh advfirewall firewall add rule name="Abrir Porta 3001" dir=in action=allow protocol=UDP localport=3001


============================================================================================================


Isso criar√° uma regra no Firewall do Windows permitindo conex√µes TCP na porta 3001.

Confirmar se a regra foi aplicada:

Para verificar, digite:

netsh advfirewall firewall show rule name="Abrir Porta 3001"



Caso voc√™ queira abrir a porta para UDP, troque TCP por UDP no primeiro comando.

Se tiver d√∫vidas ou precisar de outra configura√ß√£o espec√≠fica, me avise! üöÄ
=============================================================================================================
